// Generated by view binder compiler. Do not edit!
package com.utotech.danzhehplus.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.utotech.danzhehplus.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCatchingWavesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cardSentence;

  @NonNull
  public final Button has;

  @NonNull
  public final Button like;

  @NonNull
  public final TextView txtSentence;

  private FragmentCatchingWavesBinding(@NonNull ConstraintLayout rootView,
      @NonNull CardView cardSentence, @NonNull Button has, @NonNull Button like,
      @NonNull TextView txtSentence) {
    this.rootView = rootView;
    this.cardSentence = cardSentence;
    this.has = has;
    this.like = like;
    this.txtSentence = txtSentence;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCatchingWavesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCatchingWavesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_catching_waves, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCatchingWavesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardSentence;
      CardView cardSentence = ViewBindings.findChildViewById(rootView, id);
      if (cardSentence == null) {
        break missingId;
      }

      id = R.id.has;
      Button has = ViewBindings.findChildViewById(rootView, id);
      if (has == null) {
        break missingId;
      }

      id = R.id.like;
      Button like = ViewBindings.findChildViewById(rootView, id);
      if (like == null) {
        break missingId;
      }

      id = R.id.txtSentence;
      TextView txtSentence = ViewBindings.findChildViewById(rootView, id);
      if (txtSentence == null) {
        break missingId;
      }

      return new FragmentCatchingWavesBinding((ConstraintLayout) rootView, cardSentence, has, like,
          txtSentence);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
